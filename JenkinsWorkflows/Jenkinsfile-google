pipeline {
	agent any

	tools {
        jdk 'jdk17'
        nodejs 'node18'
    }

    environment {
        deploymentName = "googleservice-depl"
		SCANNER_HOME = tool 'sonar-scanner'
		imageName = "thecodingadventure/googleservice:${GIT_COMMIT}"
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }

		stage('Checkout') {
			steps {
				checkout scm
			}
    	}

		// stage('Unit Tests - npm test:ci') {
		// 	steps {
		// 		dir('googleservice') {
		// 			sh "npm install && npm run test:ci"
		// 		}
		// 	}
		// }

		// stage('Mutation Tests - PIT') {
		// 	steps {
		// 		sh "mvn org.pitest:pitest-maven:mutationCoverage"
		// 	}
		// }

		stage('SonarQube - SAST') {
			steps {
				dir('googleservice') {
					withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=googleservice \
                    -Dsonar.projectKey=googleservice -Dsonar.exclusions=output/** '''
					}
					timeout(time: 30, unit: 'MINUTES') {
						script {
							waitForQualityGate abortPipeline: true, credentialsId: 'Sonar-token'
						}
					}
				}	
            }
		}

		// stage('Vulnerability Scan - Docker') {
		// 	steps {
		// 		parallel(
		// 			"Dependency Scan": {
		// 				dir('googleservice') {
		// 					dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
		// 				}
		// 			},
		// 			"Trivy Scan": {
		// 				dir('googleservice') {
		// 					sh "trivy fs . > trivyfs.txt"
		// 				}
		// 			},
		// 			"OPA Conftest": {
		// 				dir('googleservice') {
		// 					sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego Dockerfile'
		// 				}
		// 			}
        //         )
		// 	}
    	// }

		stage('Docker Build and Push') {
			steps {
				dir("googleservice") {
					withDockerRegistry([credentialsId: "docker", url: ""]) {
						sh 'printenv'
						sh "docker build -t ${imageName} . "
						sh 'docker push ${imageName}'
					}
				}
      		}
    	}

		stage('Vulnerability Scan - Kubernetes') {
			steps {
				parallel(
					"OPA Scan": {
						dir("infra") {
							dir("k8s-dev") {
								sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-k8s-security.rego google-depl-dev.yaml'
							}
						}
					},
					// "Kubesec Scan": {
					// 	dir() {}
					// 	sh "bash kubesec-scan.sh"
					// },
					// "Trivy Scan": {
					// 	sh "bash trivy-k8s-scan.sh"
					// }
				)
			}
		}

		stage('Kubernetes Deployment - DEV') {
			steps {
				dir("infra") {
					dir("k8s-dev") {
						withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'SECRET_K8S_TOKEN', namespace: '', serverUrl: 'https://0CB2238B374B29AB00ACFCAC02C008E8.gr7.ap-southeast-1.eks.amazonaws.com']]) {
							sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
							sh 'chmod u+x ./kubectl'  
							sh './kubectl get nodes'
							sh "sed -i 's#replace#thecodingadventure/googleservice:${GIT_COMMIT}#g' google-depl-dev.yaml"
							sh "./kubectl apply -f google-depl-dev.yaml -n dev"
						}
					}
				}
			}
    	}	

		// stage('K8S Deployment - DEV') {
		// 	steps {
		// 		parallel(
		// 			"Deployment": {
		// 				dir("infra") {
		// 					dir("k8s-dev") {
		// 						withKubeConfig(kubectlCredentials: [[caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'SECRET_K8S_TOKEN', namespace: '', serverUrl: 'https://0CB2238B374B29AB00ACFCAC02C008E8.gr7.ap-southeast-1.eks.amazonaws.com']]) {
		// 							sh "sed -i 's#replace#thecodingadventure/googleservice:${GIT_COMMIT}#g' google-depl-dev.yaml"
		// 							sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
		// 							sh 'chmod u+x ./kubectl'
		// 							sh "./kubectl -n dev apply -f google-depl-dev.yaml"
		// 						}
		// 					}
		// 				}
		// 			},
		// 			"Rollout Status": {
		// 				dir("infra") {
		// 					dir("k8s-dev") {
		// 						withKubeConfig(kubectlCredentials: [[caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'SECRET_K8S_TOKEN', namespace: '', serverUrl: 'https://0CB2238B374B29AB00ACFCAC02C008E8.gr7.ap-southeast-1.eks.amazonaws.com']]) {
		// 							sh '''
		// 								#!/bin/bash

		// 								sleep 60s

		// 								curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"
		// 								chmod u+x ./kubectl

		// 								if [[ $(./kubectl -n dev rollout status deploy ${deploymentName} --timeout 5s) != *"successfully rolled out"* ]]; 
		// 								then     
		// 									echo "Deployment ${deploymentName} Rollout has Failed"
		// 									./kubectl -n dev rollout undo deploy ${deploymentName}
		// 									exit 1;
		// 								else
		// 									echo "Deployment ${deploymentName} Rollout is Success"
		// 								fi
		// 							'''
		// 						}
		// 					}
		// 				}
		// 			}
		// 		)
		// 	}
    	// }
	}

	post {
    	always {
      		dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
			publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'googleservice/output/coverage/jest', reportFiles: 'index.html', reportName: 'UNIT TEST JEST Report', reportTitles: 'unit test with jest', useWrapperFileDirectly: true])
    	}
  	}
	
}
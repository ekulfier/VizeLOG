pipeline {
	agent any

	tools {
        jdk 'jdk17'
        nodejs 'node18'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
		imageName = "thecodingadventure/googleservice:${GIT_COMMIT}"
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }

		stage('Checkout') {
			steps {
				checkout scm
			}
    	}

		stage('Unit Tests - npm test:ci') {
			steps {
				dir('googleservice') {
					sh "npm install && npm run test:ci"
				}
			}
		}

		// stage('Mutation Tests - PIT') {
		// 	steps {
		// 		sh "mvn org.pitest:pitest-maven:mutationCoverage"
		// 	}
		// }

		stage('SonarQube - SAST') {
			steps {
				dir('googleservice') {
					withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=googleservice \
                    -Dsonar.projectKey=googleservice -Dsonar.exclusions=output/** '''
					}
					timeout(time: 30, unit: 'MINUTES') {
						script {
							waitForQualityGate abortPipeline: true, credentialsId: 'Sonar-token'
						}
					}
				}	
            }
		}

		stage('Vulnerability Scan - Docker') {
			steps {
				parallel(
					"Dependency Scan": {
						dir('googleservice') {
							dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
						}
					},
					"Trivy Scan": {
						dir('googleservice') {
							sh "trivy fs . > trivyfs.txt"
						}
					},
					"OPA Conftest": {
						dir('googleservice') {
							sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego Dockerfile'
						}
					}
                )
			}
    	}

		stage('Docker Build and Push') {
			steps {
				dir("googleservice") {
					withDockerRegistry([credentialsId: "docker", url: ""]) {
						sh 'printenv'
						sh "docker build -t ${imageName} . "
						sh 'docker push ${imageName}'
					}
				}
      		}
    	}

		stage('check kube version - DEV') {
			steps {
				dir("infra") {
					dir("k8s-dev") {
						withKubeConfig([credentialsId: 'kubeconfig']) {
							sh "kubectl version --short"
						}
					}
				}
			}
    	}

		stage('Kubernetes Deployment - DEV') {
			steps {
				dir("infra") {
					dir("k8s-dev") {
						withKubeConfig([credentialsId: 'kubeconfig']) {
							sh "sed -i 's#replace#thecodingadventure/googleservice:${GIT_COMMIT}#g' google-depl-dev.yaml"
							sh "kubectl apply -f google-depl-dev.yaml -n dev"
						}
					}
				}
			}
    	}	
	}

	post {
    	always {
      		dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
			publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'googleservice/output/coverage/jest', reportFiles: 'index.html', reportName: 'UNIT TEST JEST Report', reportTitles: 'unit test with jest', useWrapperFileDirectly: true])
    	}
  	}
	
}
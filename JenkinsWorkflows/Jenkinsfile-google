pipeline {
	agent any

	tools {
        nodejs 'node18'
    }

    environment {
        deploymentName = "googleservice-depl"
		SCANNER_HOME = tool 'sonar-scanner'
		imageName = "thecodingadventure/googleservice:${GIT_COMMIT}"
		APP_NAME="thecodingadventure/googleservice"
		IMAGE_TAG = "${GIT_COMMIT}"
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }

		stage('Checkout') {
			steps {
				checkout scm
			}
    	}

		stage('Unit Tests - npm test:ci') {
			steps {
				dir('googleservice') {
					sh "npm install && npm run test:ci"
				}
			}
		}

		// stage('Mutation Tests - PIT') {
		// 	steps {
		// 		sh "mvn org.pitest:pitest-maven:mutationCoverage"
		// 	}
		// }

		stage('SonarQube - SAST') {
			steps {
				dir('googleservice') {
					dir('src') {
						withSonarQubeEnv('sonar-server') {
						sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=googleservice \
						-Dsonar.projectKey=googleservice -Dsonar.exclusions=output/** '''
						}
						timeout(time: 30, unit: 'MINUTES') {
							script {
								waitForQualityGate abortPipeline: true, credentialsId: 'Sonar-token'
							}
						}

					}
				}	
            }
		}

		stage('Vulnerability Scan - Docker') {
			steps {
				parallel(
					"Dependency Scan": {
						dir('googleservice') {
							dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
						}
					},
					"Trivy Scan": {
						dir('googleservice') {
							sh "trivy fs . > trivyfs.txt"
						}
					},
					"OPA Conftest": {
						dir('googleservice') {
							sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego Dockerfile'
						}
					}
                )
			}
    	}

		stage('Docker Build and Push') {
			steps {
				dir("googleservice") {
					script {
						withDockerRegistry(credentialsId: "docker", toolName: 'docker') {
							sh 'printenv'
							sh "docker build -t ${imageName} . "
							sh 'docker push ${imageName}'
						}
					}
				}
      		}
    	}

		stage('Vulnerability Scan - Kubernetes') {
			steps {
				parallel(
					"OPA Scan": {
						dir("infra/k8s-dev") {
							sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-k8s-security.rego google-depl-dev.yaml'
						}
					},
					"Kubesec Scan": {
						dir("infra/k8s-dev") {
							sh "bash google-kubesec-scan.sh"
							// withDockerRegistry(credentialsId: "docker", toolName: 'docker') {
								// script {
								// 	def scanMessage = sh(script: 'docker run -i kubesec/kubesec:512c5e0 scan /dev/stdin < google-depl-dev.yaml | docker run -i --rm stedolan/jq .[0].message -r', returnStdout: true).trim()
								// 	def scanScore = sh(script: 'docker run -i kubesec/kubesec:512c5e0 scan /dev/stdin < google-depl-dev.yaml | docker run -i --rm stedolan/jq .[0].score', returnStdout: true).trim()
				
								// 	echo "Score is ${scanScore}"
								// 	echo "Kubesec Scan ${scanMessage}"
				
								// 	if (scanScore.toInteger() >= 4) {
								// 		echo "Scanning Kubernetes Resource has Passed"
								// 	} else {
								// 		echo "Score is ${scanScore}, which is less than 4."
								// 		echo "Scanning Kubernetes Resource has Failed"
								// 		error "Scanning Kubernetes Resource has Failed"
								// 	}
								// }
							// }
						}
					},
					"Trivy Scan": {
						dir("infra/k8s-dev") {
							sh "bash trivy-k8s-scan.sh"
						}
					}
				)
			}
		}

		stage ('Cleanup Artifacts') {
           steps {
               script {
                    sh "docker rmi ${imageName}"
               }
          }
       	
		}

       	stage("Checkout from SCM") {
               steps {
                   git branch: 'main', credentialsId: 'github', url: 'https://github.com/ekulfier/gitops-vizelog'
               }
        }

        stage("Update the Deployment Tags") {
            steps {
                dir("apps/dev") {
                    sh """
                       cat google-deployment.yaml
                       sed -i 's#${APP_NAME}.*#${APP_NAME}:${IMAGE_TAG}#g' google-deployment.yaml
                       cat google-deployment.yaml
                    """
                }
            }
        }

        stage("Push the changed deployment file to Git") {
            steps {
                dir("apps/dev") {
                    sh """
                       git config --global user.name "ekulfier"
                       git config --global user.email "sorrachak.holy201@gmail.com"
                       git add google-deployment.yaml
                       git commit -m "Updated Deployment Manifest"
                    """
                    withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                      sh "git push https://github.com/ekulfier/gitops-vizelog main"
                    }
                }
            }
        }

	}

	post {
    	always {
      		dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
			publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'googleservice/output/coverage/jest', reportFiles: 'index.html', reportName: 'UNIT TEST JEST Report', reportTitles: 'unit test with jest', useWrapperFileDirectly: true])
    	}
  	}
	
}
pipeline {
	agent any

	tools {
        nodejs 'node18'
    }

    environment {
        deploymentName = "googleservice-depl"
		SCANNER_HOME = tool 'sonar-scanner'
		imageName = "thecodingadventure/googleservice:${GIT_COMMIT}"
		APP_NAME="thecodingadventure/googleservice"
		IMAGE_TAG = "${GIT_COMMIT}"
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }

		stage('Checkout') {
			steps {
				checkout scm
			}
    	}

		stage('Unit Tests - npm test:ci') {
			steps {
				dir('googleservice') {
					sh "npm install && npm run test:ci"
				}
			}
		}

		stage('Mutation Tests - PIT') {
			steps {
				sh "echo PIT Stage"
			}
		}

		stage('SonarQube - SAST') {
			steps {
				dir('googleservice') {
					dir('src') {
						withSonarQubeEnv('sonar-server') {
						sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=googleservice \
						-Dsonar.projectKey=googleservice -Dsonar.exclusions=output/** '''
						}
						timeout(time: 30, unit: 'MINUTES') {
							script {
								waitForQualityGate abortPipeline: true, credentialsId: 'Sonar-token'
							}
						}

					}
				}	
            }
		}

		stage('Vulnerability Scan - Docker') {
			steps {
				parallel(
					"Dependency Scan": {
						dir('googleservice') {
							dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
						}
					},
					"Trivy Scan": {
						dir('googleservice') {
							sh "trivy fs . > trivyfs.txt"
						}
					},
					"OPA Conftest": {
						dir('googleservice') {
							sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego Dockerfile'
						}
					}
                )
			}
    	}

		stage('Docker Build and Push') {
			steps {
				dir("googleservice") {
					script {
						withDockerRegistry(credentialsId: "docker", toolName: 'docker') {
							sh 'printenv'
							sh "docker build -t ${imageName} . "
							sh 'docker push ${imageName}'
						}
					}
				}
      		}
    	}

		stage('Vulnerability Scan - Kubernetes') {
			steps {
				parallel(
					"OPA Scan": {
						dir("infra/k8s-dev") {
							sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-k8s-security.rego google-depl-dev.yaml'
						}
					},
					"Kubesec Scan": {
						dir("infra/k8s-dev") {
							sh "bash google-kubesec-scan.sh"
						}
					},
					"Trivy Scan": {
						dir("infra/k8s-dev") {
							sh "bash trivy-k8s-scan.sh"
						}
					}
				)
			}
		}

		stage ('Cleanup Artifacts') {
           steps {
               script {
                    sh "docker rmi ${imageName}"
               }
          	}
       	
		}

		stage('K8S Deployment - DEV') {
			steps {
				parallel(
					"Deployment": {
						dir("infra/k8s-dev") {
							script {
								withKubeConfig([credentialsId: 'kubeconfig']) {
									sh "sed -i 's#replace#${imageName}#g' google-depl-dev.yaml"
									sh "kubectl -n dev apply -f google-depl-dev.yaml"
								}
							}
						}
					},
					"Rollout Status": {
						dir("infra/k8s-dev") {
							script {
								withKubeConfig([credentialsId: 'kubeconfig']) {
								sh '''
									#!/bin/bash
									sleep 60s

									if [[ $(./kubectl -n dev rollout status deploy ${deploymentName} --timeout 5s) != *"successfully rolled out"* ]]; 
									then     
										echo "Deployment ${deploymentName} Rollout has Failed"
										kubectl -n dev rollout undo deploy ${deploymentName}
										exit 1;
									else
										echo "Deployment ${deploymentName} Rollout is Success"
									fi
								''' 
								}
							}
						}
					}	
				)
			}
		}

		stage("Checkout from SCM") {
               steps {
                   git branch: 'staging', credentialsId: 'github', url: 'https://github.com/ekulfier/gitops-vizelog'
               }
        }

        stage("Update the Deployment Tags") {
            steps {
                dir("apps/staging") {
                    sh """
                       cat google-deployment.yaml
                       sed -i 's#${APP_NAME}.*#${APP_NAME}:${IMAGE_TAG}#g' google-deployment.yaml
                       cat google-deployment.yaml
                    """
                }
            }
        }

        stage("Push the changed deployment file to Git") {
            steps {
				dir("apps/staging") {
					sh """
						git config --global user.name "ekulfier"
						git config --global user.email "sorrachak.holy201@gmail.com"
						git add google-deployment.yaml
						git commit -m "Updated Deployment Manifest"
					"""
					withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
						sh "git push https://github.com/ekulfier/gitops-vizelog staging"
					}
				}   
            }
        }
		
	}

	post {
    	always {
      		dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
			publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'googleservice/output/coverage/jest', reportFiles: 'index.html', reportName: 'UNIT TEST JEST Report', reportTitles: 'unit test with jest', useWrapperFileDirectly: true])
    	}
  	}
	
}